#Isabella Shi Session 1


#1 Counting DNA nucleotide
'''
Given: A DNA string s of length at most 1000 nt.
Return: Four integers (separated by spaces) counting the respective number of 
times that the symbols 'A', 'C', 'G', and 'T' occur in s.

Sample Dataset: AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC
Sample Output: 20 12 17 21
'''
def countDNA(nucleotide):
  #use the count method
  countA = nucleotide.count('A')
  countC = nucleotide.count('C')
  countG = nucleotide.count('G')
  countT = nucleotide.count('T')
  
  #return the result
  result = str(countA) + ' ' + str(countC) + ' ' + str(countG) + ' ' + str(countT)
  return result

#test case
print(countDNA('AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC'))
#I got the right answer

print(countDNA('ATCTGGCCTGCACGCCCACATTTCTGCACGTTGAAAACGGTCGGATATAGAAAAGTTTAGTCTAATAGTCCATTGAGAACGTGAAGTAACAAATGGTTTTCTGCTGTATTTGGTGATGGGTATCCGGCGGTGGCTGGCACAGTCTCTATTACTGTGACGTCTAAGCACGGGCGCGGAAAGCGCTCCGCTACCCTAGTACGGCCCCTGGACGGACGCCACGGTCGTAAGCGAATCTCCGACTAAGTGCCCTACACACTTTCTATTTCGATACTGGTGCGAAACCAAAGAGGTGTCGGGTCTGTCTGAATGCTATAAGGTGAGTTGGATTCTACTTCATGTAGATATTCCTTCCATAATTCTAGGACCTTGAGACCCCCCAGTTCGTTAACAAAGAGCGTAAATAGCATATTGAGAACGACCTTTGCATGAAGAAGTTGCAAGTTAACCTAACCGAGCGAACGAGACCTTTCTAGGGTCGTGATTACCAATGGATAGCTCCTTCGAGGTGCAACTGTCTAACTTGACTACGGGCGAAGCCAGAAAGTCCCGCATGGATCGATCACTGACCACGTCAGACTTCGAGCACGCGATATACCTTCATGCTTAAGTCCGGAACCCTTGATAGAGCGTCTATACTAACTAAGCCCTGCTTAGCCCTACCCGCAGGTCTACAAGGGATACCGTTCGTCTGGTCCGTAACATCCTCGTACGTTTAGGCGGACTGTAAAGTCCGCACGCCTGCATACATCGAACCGGCATGCCGCGGTCGGACTAGACACGCGAAGGAAGCCAAACTCTCCCTATGTTATTGGGCTCGTCCCGGATCAGGGAAGAAGGTTAA'))
#I got the right answer




#2 Transcribing DNA into RNA
'''
Given: A DNA string t having length at most 1000 nt.
Return: The transcribed RNA string of t.

Sample Dataset: GATGGAACTTGACTACGTAAATT
Sample Output: GAUGGAACUUGACUACGUAAAUU
'''
def DNAtoRNA(nucleotide): 
  #replace all Ts with U
  RNA = nucleotide.replace('T', 'U')
  return RNA

#test case
print(DNAtoRNA('GATGGAACTTGACTACGTAAATT'))
#I got the right answer

print(DNAtoRNA('TAGTCGAAACAGCAGCGGAACATACAGTGCCACAGGTACAAGAAGCAGTAGCTTTAGTATGCACATGGACAGTTCCATGGGATCGTAAATAGGAATTGCAAGGGTAGGTATCTCCTGTAGATAAGAGGATTACATTCACATCTCGTATAAGGTGGGAGACCCCCGCTACAGTTTTTATTATTATCGAGTGAAGGAAGTCTATTATTCCCGGACAAATCTCGTGACGAAAGTTTCGGCGAAGTGGGCGGAACTTGCCCTGGGTCACTGCAACGCATATTATCCGCGGATTTACTCTGAAAGAGTTGGCATCCTCAGTTTAACTGCCGGATGGCCTTGACAAAAACTAAGCCTTCGTTATGCGGAATTAGCAAGGCGTACCCACCGTCCCGCGGAGACAGCGGTACTGGTTACACCCCATATTAGCCACCATATCCTTTAGGCAAAGTTCCGCCACTGTCACGATGGGCTTCCACTCTCCGATGAGATGCAACTTTATAATCCTAATCAAAGTGCATAAGGTCAGGACACGTTGCTTAATATGCCTGTCACGGATCCTGGGGATTAACGTCCGCAAACGGTGAGACCGCGGTAGCGCTGGCGTTACTTTTCTTTAAGAGGCAGGCGCGTGTCCTATAACTTAAGTGAAGGCAGCGGTGATCACTGTCTGGTAACCGGGGCACGGCTTATACTGTTAGCTACACCCGATGCTATCTTTGAATACCAGGCGGGGCTACGTACCTCAAGGTGGGGATTAAGTCTGCGTAGTCGGGGAGACTCGCTCGACTTTCCATCTTGATCATCTTCCTCGAGAACGCGCAGCGCTCCTCCTTTAGTCGCAGTGGAGACTCCATTGACCGTGCGAAAGGCTTCGGCGACGTGCTTCAGTGAGGATCACGATGTGATCGCGGTTTGTGCTGAAAAATGCCGGTGTACTGTCCTTGCGGGTATGCG'))
#I got the right answer




#3 Complementing a Strand of DNA
'''
Given: A DNA string s of length at most 1000 bp.
Return: The reverse complement sc of s.

Sample Dataset: AAAACCCGGT
Sample Output: ACCGGGTTTT
'''

def dnaReverse(dnaSeq):
  dnaSeqCompliment = ''
  #translate nucleotide into complimentary letters
  #append the letter into the empty string
  for nucleotide in dnaSeq:
    if nucleotide == 'T':
      dnaSeqCompliment += 'A'
    elif nucleotide == 'A':
      dnaSeqCompliment += 'T'
    elif nucleotide == 'G':
      dnaSeqCompliment += 'C'
    elif nucleotide == 'C':
      dnaSeqCompliment += 'G'
  #reverse the strand
  dnaSeqCompliment = dnaSeqCompliment[::-1]
  return dnaSeqCompliment

print(dnaReverse('AAAACCCGGT'))
#I got the right answer

print(dnaReverse('GAGGGTAAAGACCAGTGAGCGTGAGCAGTTGAAATCCTGTGCGCGCGCCTCTCTGTTGGATCCCATCCTAATCCTGAGCGCAATGGTCACGCGTCTCGGAGCTTGTCGATTCCTATGTAGGTGCTACAGGTTGCACGCCGCAGGGTTGATTGCATGTAAGTCACGGATAAAGAACGAACGAAGAAATACGATGGAAAGACGTTAGTAGCATGTCGCCGCGTATGATCGCCGTATCGAACTATGTGAAATGTATATCAGGGACCGTCGAGGACGGTTTCCACTTTCAAGTGCGAGTGGCGCAATGATTCGTCGGTAATGGCACTGGTACACGTTGGCCGGCAAGAGCAATTAAAAGTTAGCCCCGGGGATTTTCGAGAACGATGGGGCCGGAACGGTCTCCACAAATTTGCGCGAATCCTCGGTTCAGGAGGATGTGTGACCCGATCTCTTGGACAACCACTCTGGAGCTTTACCCCGCGACATGGACGCCTAATATTAGTTTCCAGGGGCAGTAGACGAGTCTTACACGACGGAATTCTGGAGGTAAAGACTTACCTTGGCAACATCCGCTGAAACGGTAACTGACTCACGACAGTAAGTGCCATCCCTATCGCCCCACCCGTTGAAATGGATCTATGGGTCTCTAGCGTGCCTGGCCTCCCCACTCTGGTGTTGGCCTCACATTCCAGCAAGTTGAGTTCGTTGGTACGCAGCGAGGCGTCTTGTAAGCAATTTAGGGTAAGACGAGAACTCGAATGAGAGACGGCTTTCGGTGCAGGTATTGATCCCGAACGCTTATCAGGTGGGTCTCTAAACGCTTAGGGATCAACTAGTTGACAACAGCTACCTGCATGACAACGAAAGGGAATAAGCCGCTTTCTGCCCGGATAATGCTAAGGACCCCCTATGGCAACGAATAGCACGCATACAACTAAAATCTACGAAAAGCCAGTCATCCTGGGGC'))
#I got the right answer




#4 Rabbits and Recurrence Relations
'''
Given: Positive integers n≤40 and k≤5.
Return: The total number of rabbit pairs that will be present after n months, 
if we begin with 1 pair and in each generation, every pair of reproduction-age rabbits produces a litter of k rabbit pairs (instead of only 1 pair).
'''

def rabbitCount(n, k):
  index1 = 1
  index2 = 1
  #calculate the rabbit number
  for month in range(2, n): 
    rabbitNumber = index1 + k * index2
    index2 = index1
    index1 = rabbitNumber
  
  return rabbitNumber

print(rabbitCount(5, 3))
#I got the right answer

print(rabbitCount(29, 4))
#I got the right answer
